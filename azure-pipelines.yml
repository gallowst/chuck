# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

schedules:
- cron: "0 23 * * 0"
  displayName: "Weekly Sunday build"
  branches:
    include:
    - master
  always: "true"
  
trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  trivyVersion: 0.9.1
  imageName: 'gallows/chuck'

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: Docker@2
      displayName: Login
      inputs:
        containerRegistry: 'dockerhub'
        command: 'login'
    
    - task: Docker@2
      displayName: Build the Docker image
      inputs:
        repository: '$(imageName)'
        command: build
        dockerfile: '**/Dockerfile'
        tags: |
          $(tag)
          latest

    - script: |
        sudo apt-get install rpm
        wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
        sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
        trivy -v
      displayName: 'Download and install Trivy'
 
    - task: CmdLine@2
      displayName: "Run trivy scan"
      inputs:
        script: |
            trivy image --severity LOW,MEDIUM --format template --template "@templates/junit.tpl" -o junit-report-low-med.xml $(imageName):$(tag)         
            trivy image --severity HIGH,CRITICAL --format template --template "@templates/junit.tpl" -o junit-report-high-crit.xml $(imageName):$(tag)  

    - task: Docker@2
      displayName: "Push to Dockerhub"
      inputs:
        containerRegistry: 'dockerhub'
        repository: 'gallows/chuck'
        command: 'push'
        tags: '$(tag)'
  
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report-low-med.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
        testRunTitle: 'Trivy - Low and Medium Vulnerabilities'
      condition: 'always()'   

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report-high-crit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'Trivy - High and Critical Vulnerabilities'
      condition: 'always()'  